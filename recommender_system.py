# -*- coding: utf-8 -*-
"""recommender_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vWwwPDYh0K4RrCyClx89JvNGVjBIqeKO
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf
tf.__version__

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from tensorflow.keras.layers import Input, Embedding, Dense, Concatenate, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import SGD

!wget -nc http://files.grouplens.org/datasets/movielens/ml-20m.zip

!unzip -n ml-20m.zip

!ls

df = pd.read_csv('ml-20m/ratings.csv')
df.head()

df.userId = pd.Categorical(df.userId)
df['new_user_id'] = df.userId.cat.codes

df.movieId = pd.Categorical(df.movieId)
df['new_movie_id'] = df.movieId.cat.codes

user_ids = df['new_user_id'].values
movie_ids = df['new_movie_id'].values
ratings = df['rating'].values

N = len(set(user_ids))
M = len(set(movie_ids))
K = 10

u = Input(shape=(1,))
m = Input(shape=(1,))

u_emb = Embedding(N,K)(u)
m_emb = Embedding(M,K)(m)

u_emb = Flatten()(u_emb)
m_emb = Flatten()(m_emb)

x = Concatenate()([u_emb,m_emb])

x = Dense(1024, activation='relu')(x)

x = Dense(1)(x)

model = Model(inputs = [u,m], outputs = x)
model.compile(loss='mae', optimizer = SGD(lr=0.08, momentum=0.9))

from sklearn.utils import shuffle
user_ids, movie_ids, ratings = shuffle(user_ids,movie_ids,ratings)
Ntrain = int(0.8*len(ratings))
train_user = user_ids[:Ntrain]
train_movie = movie_ids[:Ntrain]
train_ratings = ratings[:Ntrain]

test_user = user_ids[Ntrain:]
test_movie = movie_ids[Ntrain:]
test_ratings = ratings[Ntrain:]

avg_rating = train_ratings.mean()
train_ratings = train_ratings - avg_rating
test_ratings = test_ratings - avg_rating

r = model.fit( x = [train_user, train_movie], y = train_ratings,
              epochs = 25,
              batch_size = 1024,
              validation_data = ([test_user,test_movie],test_ratings))

plt.plot(r.history['loss'],label='loss')
plt.plot(r.history['val_loss'],label='val_loss')
plt.legend()